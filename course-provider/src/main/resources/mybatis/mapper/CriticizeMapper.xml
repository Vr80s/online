<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xczhihui.course.mapper.CriticizeMapper">

    <sql id="selectCriticize">
        SELECT
        c.id,
        c.star_level,
        c.create_person,
        c.is_buy,
        c.`criticize_lable`,
        c.`content`,
        c.`create_time`,
        c.`praise_sum`,
        c.`overall_level`,
        c.`content_level`,
        c.`deductive_level`,
        if(c.reply_criticize_id!="",(select content from oe_criticize where id=c.reply_criticize_id),"") replyContent,
        if(c.reply_criticize_id!="",(select create_time from oe_criticize where id=c.reply_criticize_id),"")
        replyCreateTime,
        IF(LOCATE(#{userId},c.`praise_login_names`),TRUE,FALSE) isPraise,
        ou.`small_head_photo` smallHeadPhoto,
        ou.`name`,
        ou.id as userId,
        ou.login_name as loginName,
        ous.`name` as replyName,
        ous.`small_head_photo` as replySmallHeadPhoto,
        ous.login_name as replyLoginName
        FROM
        `oe_criticize` c
        JOIN `oe_user` ou
        ON c.`create_person` = ou.`id`
        left join `oe_user` ous
        ON c.`reply_user` = ous.`id`
        WHERE c.`is_delete` = 0
    </sql>
    <select id="selectCourseCriticize" resultType="com.xczhihui.course.model.Criticize">
        <include refid="selectCriticize"/>
        AND c.`course_id` = #{courseId}
        ORDER BY c.`create_time` DESC

    </select>

    <select id="selectCollectionCriticize" resultType="com.xczhihui.course.model.Criticize">
        <include refid="selectCriticize"/>
        AND c.`course_id` in
        <foreach collection="courseIds" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        ORDER BY c.`create_time` DESC
    </select>

    <select id="selectAnchorCriticize" resultType="com.xczhihui.course.model.Criticize">
        <include refid="selectCriticize"/>
        AND c.`user_id`=#{anchorUserId}
        ORDER BY c.`create_time` DESC
    </select>
    <select id="selectReplyByCriticizeId" resultType="com.xczhihui.course.model.Reply">
        select
        re.`reply_content`,
        re.reply_user,
        ou.`name`,
        ou.`login_name` as loginName,
        ou.id as userId
        from
        `oe_reply` re
        join `oe_user` ou
        ON re.`reply_user` = ou.`id`
        where re.`criticize_id` = #{criticizeId}
        ORDER BY re.`create_time` DESC
    </select>
    <select id="hasCourse" resultType="integer">
        SELECT
        count(*)
        from
        apply_r_grade_course argc
        where argc.is_delete = 0
        and argc.course_id = #{courseId}
        and argc.user_id = #{userId}
        AND argc.`validity`>NOW()
    </select>
    <select id="hasCriticizeScore" resultType="integer">
        SELECT
        COUNT(*)
        FROM
        `oe_criticize` oc
        WHERE
        oc.`star_level` !=0 AND oc.`star_level` IS NOT NULL
        and oc.course_id = #{courseId}
        and oc.create_person = #{userId}
    </select>

    <!--  如果是免费的话，不算购买 -->
    <select id="hasCourseIsBuy" resultType="integer">
        SELECT
        count(*)+if((select oc.is_free from oe_course as oc where oc.id = #{courseId}) = 0,0,-1)
        from
        apply_r_grade_course argc
        where argc.is_delete = 0
        and argc.course_id = #{courseId}
        and argc.user_id = #{userId}
    </select>

    <select id="hasUserAllCourseIsBuy" resultType="integer">
        select count(*) from apply_r_grade_course as argc
        where argc.is_delete = 0
        and argc.user_id = #{userId}
        and argc.course_id in
        ( select id from oe_course as oc where oc.user_lecturer_id = #{userLecturerId} and oc.is_free = 0 )
    </select>


    <sql id="commentMeanCount">
        <choose>
            <when test="collection!=null and collection == true">
                and ( cc.course_id in ( select cc1.course_id from
                collection_course cc1 where cc1.collection_id = #{courseId} )
                or cc.course_id = #{courseId} )
            </when>
            <otherwise>
                and cc.course_id =#{courseId}
            </otherwise>
        </choose>
    </sql>


    <sql id="selectCourseLabelMean">
        (
        select count(*) from oe_criticize where course_id =#{courseId} and is_delete = 0 and
        criticize_lable like "%1%"
        )
        union all
        (
        select count(*) from oe_criticize where course_id =#{courseId} and is_delete = 0 and
        criticize_lable like "%2%"
        )

        union all
        (
        select count(*) from oe_criticize where course_id =#{courseId} and is_delete = 0 and
        criticize_lable like "%3%"
        )

        union all
        (
        select count(*) from oe_criticize where course_id =#{courseId} and is_delete = 0 and
        criticize_lable like "%4%"
        )

        union all
        (
        select count(*) from oe_criticize where course_id =#{courseId} and is_delete = 0 and
        criticize_lable like "%5%"
        )
    </sql>

    <!-- 针对课程了。 节目内容、主播演绎的平均值。     -->
    <select id="selectPcCourseCommentMeanCount" resultType="java.lang.Integer">
        (
        SELECT IFNULL(ROUND(AVG(cc.content_level), 0),0) FROM oe_criticize
        cc where cc.is_delete = 0 and cc.content_level !=0
        <include refid="commentMeanCount"/>
        )
        union all
        (
        SELECT IFNULL(ROUND(AVG(cc.deductive_level), 0),0) FROM oe_criticize
        cc where cc.is_delete = 0 and cc.deductive_level !=0
        <include refid="commentMeanCount"/>
        )
        union all
        <include refid="selectCourseLabelMean"/>
    </select>

    <!-- 针对课程了。 各种label的平均值      -->
    <select id="selectMobileCourseCommentMeanCount" resultType="java.lang.Integer">
        <include refid="selectCourseLabelMean"/>
    </select>

    <sql id="selectUserLabelMean">
        (
        select count(*) from oe_criticize where user_id =#{userId} and is_delete = 0 and
        criticize_lable like "%1%"
        )
        union all
        (
        select count(*) from oe_criticize where user_id =#{userId} and is_delete = 0 and
        criticize_lable like "%2%"
        )
        union all
        (
        select count(*) from oe_criticize where user_id =#{userId} and is_delete = 0 and
        criticize_lable like "%3%"
        )
        union all
        (
        select count(*) from oe_criticize where user_id =#{userId} and is_delete = 0 and
        criticize_lable like "%4%"
        )
        union all
        (
        select count(*) from oe_criticize where user_id =#{userId} and is_delete = 0 and
        criticize_lable like "%5%"
        )
    </sql>


    <select id="selectMobileUserCommentMeanCount" resultType="java.lang.Integer">
        <include refid="selectUserLabelMean"/>
    </select>


    <!-- 针对用户了。 节目内容、主播演绎的平均值。   需要多加一个总体映像的平均值  -->
    <select id="selectPcUserCommentMeanCount" resultType="java.lang.Double">
        (
        SELECT IFNULL(ROUND(AVG(cc.content_level), 0),0) FROM oe_criticize
        cc where cc.is_delete = 0 and cc.content_level !=0
        and user_id =#{userId}
        )
        union all
        (
        SELECT IFNULL(ROUND(AVG(cc.deductive_level), 0),0) FROM oe_criticize
        cc where cc.is_delete = 0 and cc.deductive_level !=0
        and user_id =#{userId}
        )
        union all

        <include refid="selectUserLabelMean"/>

        union all

        (
        SELECT ROUND(AVG(cc.overall_level), 1) FROM oe_criticize cc where
        cc.is_delete = 0 and cc.overall_level !=0
        and user_id =#{userId}
        )
    </select>


</mapper>